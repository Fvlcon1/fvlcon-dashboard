generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  firstName              String                   @db.VarChar(255)
  lastName               String                   @db.VarChar(255)
  email                  String                   @unique
  password               String
  companyCode            String                   @db.VarChar(50)
  emailVerified          Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  CameraFolder           CameraFolder[]
  FvlconizationLogs      FvlconizationLogs[]
  FvlconizationVideoLogs FvlconizationVideoLogs[]
  PersonTracking         PersonTracking[]
  PlateTracking          PlateTracking[]
  SegmentationLogs       SegmentationLogs[]
  Stream                 Stream[]
  twoFactorCodes         TwoFactor[]              @relation("UserTwoFactors")
  verifications          Verification[]           @relation("UserVerifications")
}

model Verification {
  id               String   @id @default(cuid())
  verificationCode String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  userId           String
  user             User     @relation("UserVerifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Stream {
  id             String       @id
  name           String
  userId         String
  rtspurl        String
  cameraFolderId String
  CameraFolder   CameraFolder @relation(fields: [cameraFolderId], references: [id])
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, name])
}

model TwoFactor {
  id            String   @id @default(cuid())
  userId        String
  twoFactorCode String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  user          User     @relation("UserTwoFactors", fields: [userId], references: [id], onDelete: Cascade)
}

model CameraFolder {
  id     String   @id
  name   String
  userId String
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Stream Stream[]
}

model FvlconizationLogs {
  id                 String      @id
  type               MediaTypes
  date               DateTime
  timeElapsed        Int
  status             StatusTypes
  userId             String
  media              Json[]
  uploadedImageS3key String
  User               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FvlconizationVideoLogs {
  id             String      @id @default(cuid())
  date           DateTime
  timeElapsed    Int
  status         StatusTypes
  userId         String
  occurance      Json[]
  thumbnailS3Key String
  videoS3Key     String
  User           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PersonTracking {
  id          String   @id @default(cuid())
  date        DateTime
  userId      String
  locations   Json[]
  personLogId String
  faceId      String
  S3Key       String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlateTracking {
  id         String   @id @default(cuid())
  plateLogId String
  date       DateTime
  userId     String
  locations  Json[]
  S3Key      String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SegmentationLogs {
  id                 String      @id
  type               MediaTypes
  date               DateTime
  timeElapsed        Int
  status             StatusTypes
  userId             String
  media              Json[]
  uploadedImageS3key String
  User               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CriminalRecord {
  id                   String   @id
  personId             String
  arrestDate           DateTime
  arrestingOfficer     String
  criminalRecordId     String
  offenceTypee         String
  sentenceLengthMonths Int
  niaTableId           String
}

enum MediaTypes {
  image
  video
}

enum StatusTypes {
  failed
  successful
}
